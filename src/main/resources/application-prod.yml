spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update # 프로덕션에서는 스키마를 자동으로 변경하지 않도록 validate 사용
    show-sql: false
    properties:
      hibernate:
        format_sql: false
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID} # 웹용 클라이언트 ID
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "http://43.201.106.31/api/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
          naver:
            client-id: ${NAVER_CLIENT_ID} # 웹용 클라이언트 ID
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "http://43.201.106.31/api/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
          google:
            client-id: ${GOOGLE_CLIENT_IDS}
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  application:
    name: chalpu

jwt:
  secret: ${JWT_SECRET}
  expiration: 3600000
  refresh-token-expiration: 604800000

server:
  port: ${SERVER_PORT:8080}
  forward-headers-strategy: native
  tomcat:
    use-relative-redirects: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: when-authorized
    prometheus:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

# OAuth2 Redirect URLs
oauth2:
  redirect:
    success-url: ${OAUTH2_REDIRECT_SUCCESS_URL}
    failure-url: ${OAUTH2_REDIRECT_FAILURE_URL}

fcm:
  service-account-key-json: ${FCM_SERVICE_ACCOUNT_KEY_JSON}


cloud:
  aws:
    s3:
      bucket: chalpu-photo-bucket
    cloudfront:
      domain: https://cdn.chalpu.com 
    region:
      static: ap-northeast-2
    stack:
      auto: false

photoroom:
  api:
    url: https://sdk.photoroom.com/v1/segment
    key: ${PHOTOROOM_API_KEY}